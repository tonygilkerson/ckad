{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>This guide is intended to prepare you for the Certified Kubernetes Application Developer (CKAD) exam.</p>"},{"location":"#learning-path","title":"Learning Path","text":"<p>The below learning path is should prepare you for the exam:</p> <ol> <li>Take the Introduction to Kubernetes (LFS158x) course</li> <li>Practice with the CKAD Simulator Preview</li> <li>Purchase the exam here, it includes two exam simulator sessions</li> <li>Take your first simulator session and learn from the solutions given at the end</li> <li>Study for the exam using this guide again or find your own resources but do study</li> <li>Take your second simulator session and again learn from the solutions given at the end</li> <li>Rock the real exam</li> </ol> <p>See also the official CKAD learning path</p>"},{"location":"#next","title":"Next","text":"<ul> <li>Read about the exam</li> <li>Read how to use this guide</li> </ul>"},{"location":"about-the-exam/","title":"About The Exam","text":"<p>The following contains information about the exam to give you some context about what you are getting into.</p>"},{"location":"about-the-exam/#who-is-it-for","title":"Who is it for?","text":"<p>This certification is for Kubernetes engineers, cloud engineers and other IT professionals responsible for building, deploying, and configuring cloud native applications with Kubernetes.</p>"},{"location":"about-the-exam/#what-does-this-certification-demonstrate","title":"What does this certification demonstrate?","text":"<p>The Certified Kubernetes Application Developer (CKAD) can design, build and deploy cloud-native applications for Kubernetes. A CKAD can define application resources and use Kubernetes core primitives to create/migrate, configure, expose and observe scalable applications. The exam assumes working knowledge of container runtimes and microservice architecture.</p>"},{"location":"about-the-exam/#what-is-included","title":"What is included?","text":"<ul> <li>2 hour duration Performance Based Exam</li> <li>Certification valid for 2 years</li> <li>Includes 12 month eligibility</li> <li>Includes one retake</li> <li>PDF Certificate and Digital Badge</li> <li>Exam Simulator</li> </ul>"},{"location":"about-the-exam/#more-information","title":"More information","text":"<p>In addition to the content here you should also review these references</p>"},{"location":"about-the-exam/#exam-environment","title":"Exam Environment","text":"<ul> <li>The CKAD exams use a Remote Desktop based on XFCE</li> <li>You'll need to use the remote Firefox browser to access the K8s docs</li> </ul>"},{"location":"about-the-exam/#general-information","title":"General Information","text":""},{"location":"about-the-exam/#cli-tools","title":"CLI Tools","text":"<p>For your convenience, all environments, in other words, the base system and the cluster nodes, have the following additional command-line tools pre-installed and pre-configured:</p> <ul> <li><code>kubectl</code> with <code>k</code> alias and Bash autocompletion</li> <li><code>jq</code> for YAML/JSON processing</li> <li><code>tmux</code> for terminal multiplexing</li> <li><code>curl</code> and <code>wget</code> for testing web services</li> <li><code>man</code> and man pages for further documentation</li> </ul>"},{"location":"about-the-exam/#exam-issues-with-current-resolutions","title":"Exam issues with current resolutions","text":""},{"location":"about-the-exam/#copypaste-and-keyboard-shortcuts","title":"Copy/Paste and Keyboard Shortcuts","text":"<p>The Linux Remote Desktop is a traditional Linux Environment and candidates need to use Linux Keyboard Shortcuts. The Terminal is a Linux Terminal, and candidates need to use Linux Terminal keyboard shortcuts:</p> <ul> <li>Copy = CTRL+SHIFT+C</li> <li>Paste = CTRL+SHIFT+V for Paste</li> <li>OR Use the Right Click Context Menu and select Copy or Paste</li> </ul>"},{"location":"about-the-exam/#faqs","title":"FAQs","text":""},{"location":"about-the-exam/#how-long-will-the-exam-take","title":"How long will the exam take?","text":"<p>Candidates are allowed 2 hours to complete exams.</p>"},{"location":"about-the-exam/#what-score-is-needed-to-pass-the-exam","title":"What score is needed to pass the exam?","text":"<p>A score of 66% or above must be earned to pass.</p>"},{"location":"about-the-exam/#what-resources-am-i-allowed-to-access-during-my-exam","title":"What resources am I allowed to access during my exam?","text":"<p>During the exam, candidates may use the browser within the VM to access the following documentation:</p> <ul> <li>https://kubernetes.io/docs</li> <li>https://kubernetes.io/blog</li> <li>https://helm.sh/docs</li> </ul>"},{"location":"about-the-exam/#where-can-i-find-practice-questions-for-ckad","title":"Where can I find practice questions for CKAD","text":"<p>Candidates who register for the exam will have access to an exam simulator, provided by Killer.sh.  </p> <p>Login to My Portal and click Start/Resume to view your exam preparation checklist. The link to the Simulator is available on the Top Right-Hand corner of the Exam Preparation Checklist.</p>"},{"location":"about-the-exam/#is-there-training-to-prepare-for-the-certification-exam","title":"Is there training to prepare for the certification exam?","text":"<p>The Linux Foundation offers a free Introduction to Kubernetes course which provides an introduction to many key concepts for Kubernetes. The Fundamentals of Kubernetes (LFS258) course builds on this introductory material and is designed as preparation for the Certified Kubernetes Administrator Exam.</p> <p>The topics covered in the Kubernetes for Developers (LFS259) course are directly aligned with the knowledge domains tested by the Certified Kubernetes Application Developer Exam.</p>"},{"location":"context/","title":"Context","text":"<p>The following contains information about the exam.</p>"},{"location":"context/#exam-environment","title":"Exam Environment","text":"<p>Below is a screenshot of the exam environment. This article goes into some detail about the exam environment.</p> <p></p> <ul> <li>The CKAD exams use a Remote Desktop based on XFCE</li> <li>You'll need to use the remote Firefox browser to access the K8s docs</li> </ul>"},{"location":"context/#general-information","title":"General Information","text":"<p>Reference see and this</p>"},{"location":"context/#cli-tools","title":"CLI Tools","text":"<p>For your convenience, all environments, in other words, the base system and the cluster nodes, have the following additional command-line tools pre-installed and pre-configured:</p> <ul> <li><code>kubectl</code> with <code>k</code> alias and Bash autocompletion</li> <li><code>jq</code> for YAML/JSON processing</li> <li><code>tmux</code> for terminal multiplexing</li> <li><code>curl</code> and <code>wget</code> for testing web services</li> <li><code>man</code> and man pages for further documentation</li> </ul>"},{"location":"context/#exam-issues-with-current-resolutions","title":"Exam issues with current resolutions","text":""},{"location":"context/#lag","title":"lag","text":"<ul> <li>Some lag is expected in a remote-desktop/VNC connection environment, such as when moving windows or scrolling through pages like CNCF documentation.</li> </ul>"},{"location":"context/#copypaste-and-keyboard-shortcuts","title":"Copy/Paste and Keyboard Shortcuts","text":"<p>The Linux Remote Desktop is a traditional Linux Environment and candidates need to use Linux Keyboard Shortcuts. The Terminal is a Linux Terminal, and candidates need to use Linux Terminal keyboard shortcuts: * Copy = CTRL+SHIFT+C * Paste = CTRL+SHIFT+V for Paste * OR Use the Right Click Context Menu and select Copy or Paste</p>"},{"location":"context/#personal-bookmarks-chrome-browser-not-available","title":"Personal Bookmarks/ Chrome Browser Not Available","text":"<ul> <li>The Linux Remote Desktop includes a Firefox Browser; candidates are prohibited from accessing all sites except those listed in our Resources Allowed Policy.</li> <li>Personal browser bookmarks (such as bookmarked links to YAML files) are not accessible within the PSI Secure Browser.</li> <li>All Exam items have been updated with \u201cDocumentation Quick Links\u201d, which provide links to the official Kubernetes documentation related to a handful of Kubernetes topics that might be required to solve a task.</li> <li>The Kubernetes documentation pages have been carefully selected to fit the topics and typically provide one or more YAML files that might help kickstart working on a task.</li> </ul>"},{"location":"context/#what-you-will-need","title":"What you will need","text":"<ul> <li>A computer see system requirement</li> <li>Reliable internet access</li> <li>Microphone - Mac users may need to allow the PSI Secure Browser within their 'System Preferences: Security &amp; Privacy: Privacy' settings for Microphone, Camera, Automation and Input Monitoring.</li> </ul> <ul> <li>Webcam - Mac users may need to allow the PSI Secure Browser within their 'System Preferences: Security &amp; Privacy: Privacy' settings for Microphone, Camera, Automation and Input Monitoring.</li> </ul>"},{"location":"context/#expectations-for-an-acceptable-testing-environment","title":"Expectations for an acceptable testing environment","text":""},{"location":"context/#clutter-free-work-area","title":"Clutter-free work area","text":"<ul> <li>No objects such as paper, writing implements, electronic devices, or other objects on top of surface</li> <li>No objects such as paper, trash bins, or other objects below the testing surface</li> </ul>"},{"location":"context/#clear-walls","title":"Clear walls","text":"<ul> <li>No paper/print outs hanging on walls</li> <li>Paintings and other wall d\u00e9cor is acceptable</li> <li>Candidates will be asked to remove non-d\u00e9cor items prior to the exam being released</li> </ul>"},{"location":"context/#lighting","title":"Lighting","text":"<ul> <li>Space must be well lit so that proctor is able to see candidate\u2019s face, hands, and surrounding work area</li> <li>No bright lights or windows behind the examinee</li> </ul>"},{"location":"context/#other","title":"Other","text":"<ul> <li>Candidate must remain within the camera frame during the examination</li> <li>Space must be private where there is no excessive noise. Public spaces such as coffee shops, stores, open office environments, etc. are not allowed.</li> </ul>"},{"location":"context/#faqs","title":"FAQs","text":""},{"location":"context/#how-long-will-the-exam-take","title":"How long will the exam take?","text":"<p>Candidates are allowed 2 hours to complete exams.</p>"},{"location":"context/#what-score-is-needed-to-pass-the-exam","title":"What score is needed to pass the exam?","text":"<p>A score of 66% or above must be earned to pass.</p>"},{"location":"context/#what-resources-am-i-allowed-to-access-during-my-exam","title":"What resources am I allowed to access during my exam?","text":"<p>During the exam, candidates may use the browser within the VM to access the following documentation:</p> <ul> <li>https://kubernetes.io/docs</li> <li>https://kubernetes.io/blog</li> <li>https://helm.sh/docs </li> </ul>"},{"location":"context/#where-can-i-find-practice-questions-for-ckad","title":"Where can I find practice questions for CKAD","text":"<p>Candidates who register for the exam will have access to an exam simulator, provided by Killer.sh.  </p> <p>Login to My Portal and click Start/Resume to view your exam preparation checklist. The link to the Simulator is available on the Top Right-Hand corner of the Exam Preparation Checklist.</p>"},{"location":"context/#is-there-training-to-prepare-for-the-certification-exam","title":"Is there training to prepare for the certification exam?","text":"<p>The Linux Foundation offers a free Introduction to Kubernetes course which provides an introduction to many key concepts for Kubernetes. The Fundamentals of Kubernetes (LFS258) course builds on this introductory material and is designed as preparation for the Certified Kubernetes Administrator Exam. </p> <p>The topics covered in the Kubernetes for Developers (LFS259) course are directly aligned with the knowledge domains tested by the Certified Kubernetes Application Developer Exam.</p>"},{"location":"how-to-use-this-guid/","title":"How to use this guild","text":""},{"location":"practice-questions/","title":"Practice Questions","text":""},{"location":"practice-questions/#setup","title":"Setup","text":""},{"location":"practice-questions/#alias","title":"alias","text":"<p>Create a few aliases that will be used in every question</p> <pre><code># Edit\n~/.bashrc\n\n# Add the following\nalias cc=clear\nalias ll='ls -ltr'\n\nalias k=kubectl\nalias ns='kubectl config set-context --current --namespace'\nalias ctx='kubectl config use-context'\nalias getctx='kubectl config get-context'\n\nDEVTODO add an alias to display the current context and namespace\n\n. .~/bashrc\n\n</code></pre> <p>optional</p> <pre><code>vim ~/myps1.sh\n\n#!/bin/bash\nmyps1() {\n\n  cluster=\"$(kubectl config current-context)\"\n  # The following assume a singel context exists\n  ns=$(kubectl config view | yq e '.contexts[0].context.namespace' -)\n\n  echo \"($cluster:$ns)  \\w$ \"\n\n}\n\n# make executable\nchmod +x myps1.sh\n. ~/myps1.sh\n\nexport PS1=\"$(myps1)\"\n</code></pre>"},{"location":"practice-questions/#vim","title":"vim","text":"<p>Toggling line numbers can be useful when finding syntax errors based on line but can be bad when wanting to mark&amp;copy with mouse.</p> <ul> <li><code>:set number</code>\u00a0- show line numbers</li> <li><code>:set nonumber</code>\u00a0- don't show line numbers</li> <li><code>:22</code> - jump to a line number</li> </ul> <p>The above settings will already be configured in your real exam environment in ~/.vimrc. But it can never hurt to be able to type these down</p> <p>vim ~/.vimrc Now enter (in insert-mode activated with i) the following lines:</p> <pre><code>vim ~/.vimrc\n\n# Insert the following lines:\nset expandtab\nset tabstop=2\nset shiftwidth=2\n</code></pre> <ul> <li>expandtab - use spaces for tab</li> <li>tabstop - amount of spaces used for tab</li> <li>shiftwidth - amount of spaces used during indentation</li> </ul>"},{"location":"practice-questions/#questions","title":"Questions","text":""},{"location":"practice-questions/#q1","title":"Q1","text":"<p>Create a namespace called <code>mynamespace</code> and a pod with image <code>nginx</code> called <code>mynginx</code> on this namespace</p> <pre><code>k create ns mynamespace\nk run mynginx --image=nginx -n mynamespace\n</code></pre>"},{"location":"practice-questions/#q2","title":"Q2","text":"<p>Create a manifest file called <code>pod.yaml</code> for a pod with image <code>nginx</code> called <code>nginx</code> in the namespace <code>mynamespace</code> then create the pod in the cluster.</p> <pre><code># Generate manifest\nk run mynginx --image=nginx --dry-run=client -n mynamespace -oyaml &gt; pod.yaml\n\n# Apply\nk apply -f pod.yaml\n</code></pre>"},{"location":"practice-questions/#q3","title":"Q3","text":"<p>Run an imperative command that will create a pod using the <code>busybox</code> image and runs the command <code>env</code> so that the output is saved in a file call <code>myout.txt</code>. After the commands runs the pod should automatically be removed.</p> <pre><code># Review the examples\nk run -h | grep Examples: -A 28\n\n# Run\nk run -it --rm busybox --image=busybox --restart=Never --command -- env &gt; myout.txt\n\n# Verify\n$ cat myout.txt\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nTERM=xterm\nHOSTNAME=busybox\nKUBERNETES_SERVICE_PORT=443\nKUBERNETES_SERVICE_PORT_HTTPS=443\nKUBERNETES_PORT=tcp://10.96.0.1:443\nKUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443\nKUBERNETES_PORT_443_TCP_PROTO=tcp\nKUBERNETES_PORT_443_TCP_PORT=443\nKUBERNETES_PORT_443_TCP_ADDR=10.96.0.1\nKUBERNETES_SERVICE_HOST=10.96.0.1\nHOME=/root\npod \"busybox\" deleted\n\n# The --rm flag should automatically remove the pod\n$ k get pods\nNo resources found in default namespace.\n</code></pre>"},{"location":"practice-questions/#q4","title":"Q4","text":"<p>Create a pod from a manifest file called <code>pod.yaml</code>. The pod should use the <code>busybox</code> image and run the command <code>env</code>.  Fetch the command output and save it to a file called <code>myout.txt</code></p> <pre><code># Review usage\nk run -h\n\n# Generate manifest\nk run mypod --image=busybox --dry-run=client --restart=Never -oyaml  --command -- env &gt; pod.yaml\n\n# Apply\nk apply -f pod.yaml\n\n# Verify\n$ k get po\nNAME    READY   STATUS      RESTARTS   AGE\nmypod   0/1     Completed   0          16s\n\n# Get logs save to file\nk logs po/mypod &gt; myout.txt\n\n# Verify\n$ cat myout.txt \nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=mypod\nKUBERNETES_PORT_443_TCP_ADDR=10.96.0.1\nKUBERNETES_SERVICE_HOST=10.96.0.1\nKUBERNETES_SERVICE_PORT=443\nKUBERNETES_SERVICE_PORT_HTTPS=443\nKUBERNETES_PORT=tcp://10.96.0.1:443\nKUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443\nKUBERNETES_PORT_443_TCP_PROTO=tcp\nKUBERNETES_PORT_443_TCP_PORT=443\nHOME=/root\n\n</code></pre>"},{"location":"practice-questions/#q5","title":"Q5","text":"<p>Create the yaml for a new namespace called <code>myns</code> without creating it</p> <pre><code>k create ns myns --dry-run=client -oyaml \n</code></pre>"},{"location":"practice-questions/#q6","title":"Q6","text":"<p>Create the YAML for a new <code>ResourceQuota</code> called <code>myrq</code> with hard limits of 1 CPU, 1G memory and 2 pods without creating it.</p> <pre><code># Review examples\nk create quota myquota --dry-run=client -oyaml -h | grep Examples:  -A5\n\n# Generate manifests\nk create quota myquota --dry-run=client --hard=cpu=1,memory=1G,pods=2 -oyaml &gt; myquota.yaml\n\n# Verify\n$ cat myquota.yaml \napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  creationTimestamp: null\n  name: myquota\nspec:\n  hard:\n    cpu: \"1\"\n    memory: 1G\n    pods: \"2\"\nstatus: {}\n</code></pre>"},{"location":"practice-questions/#q7","title":"Q7","text":"<p>Get pods on all namespaces</p> <pre><code>k get po -A\n</code></pre>"},{"location":"practice-questions/#q8","title":"Q8","text":"<p>Create a pod with image <code>nginx</code> called <code>mynginx</code> and expose traffic on port <code>80</code></p> <pre><code># Review usage\nk run -h\n\n# Generate manifest\nk run mynginx --image=nginx --port=80 --dry-run=client -oyaml &gt; mynginx.yaml\n\n# Review\n$ cat mynginx.yaml \napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: mynginx\n  name: mynginx\nspec:\n  containers:\n  - image: nginx\n    name: mynginx\n    ports:\n    - containerPort: 80\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n\n# Apply\nk apply -f mynginx.yaml\n</code></pre>"},{"location":"practice-questions/#q9","title":"Q9","text":"<p>Change the <code>mynginx</code> pod's image to <code>nginx:1.7.1</code>. Observe that the container will be restarted as soon as the image gets pulled.</p> <pre><code># Edit pod in the cluster\nk edit po/mynginx \n\n# Or edit pod manifest and apply\nvim mynginx.yaml \napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: mynginx\n  name: mynginx\nspec:\n  containers:\n  - image: nginx:1.7.1 # edit this line\n    name: mynginx\n    ports:\n    - containerPort: 80\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n\n# Apply\nk apply -f mynginx.yaml \n\n# Or use set\nk set image po/mynginx mynginx=nginx:1.7.1\n\n# In this case it took longe to formate the set command\n# and get the name of the container than just editing in place\n# There are some case where set might be faster see the examples\nk set image -h | grep Examples: -A 12\n\n# Watch the pod\nk get po/mynginx -w\n</code></pre>"},{"location":"practice-questions/#q10","title":"Q10","text":"<p>Get <code>mynginx</code> pod's IP address and use a temp <code>busybox</code> image to wget its <code>/</code> endpoint.</p> <pre><code># Display the pod IP\nk get po -owide\n\n# Launch a utility pod\nk run mybusybox --image=busybox --rm -it --command -- /bin/sh\n/ # wget http://192.168.1.3/\nConnecting to 192.168.1.3 (192.168.1.3:80)\nsaving to 'index.html'\nindex.html           100% |*********************************************|   612  0:00:00 ETA\n'index.html' saved\n</code></pre>"},{"location":"practice-questions/#q11","title":"Q11","text":"<p>Get the <code>mynginx</code> pod's manifest from the cluster and save it in a file called <code>mypod.yaml</code></p> <pre><code>k get po/mynginx -oyaml &gt; mypod.yaml\n</code></pre>"},{"location":"practice-questions/#q12","title":"Q12","text":"<p>Get information about the <code>mynginx</code> pod, including details about potential issues (e.g. pod hasn't started)</p> <pre><code>k describe po/mynginx\n</code></pre>"},{"location":"practice-questions/#q13","title":"Q13","text":"<p>Get current logs for the <code>mynginx</code> pod. Sho how if the pod crashed and restarted you could get logs about the previous instance.</p> <pre><code>k logs po/mynginx \nk logs po/mynginx -p\n</code></pre>"},{"location":"practice-questions/#q14","title":"Q14","text":"<p>Open an interactive shell in the <code>mynginx</code> pod.</p> <pre><code># Review usage\nk exec -h\n\n# Open interactive shell \nk exec -it pod/mynginx -- /bin/sh\n</code></pre>"},{"location":"practice-questions/#q15","title":"Q15","text":"<p>Create a pod with image <code>busybox</code> that echoes 'hello world' and then exits</p> <pre><code># Review the examples\nk run -h | grep Examples: -A 27\n\n# Generate manifests and apply\nk run mybox --image=busybox --dry-run=client -oyaml --command=true --restart=Never -- /bin/sh -c 'echo hello world' &gt; mybox.yaml\nk apply -f mybox.yaml\n\n# Get logs\n$ k logs po/mybox \nhello world\n\n# Verify, should be 0/1 ready and status Completed\n$ k get po\nNAME    READY   STATUS      RESTARTS   AGE\nmybox   0/1     Completed   0          3m15s\n</code></pre>"},{"location":"practice-questions/#q16","title":"Q16","text":"<p>Create a pod with image <code>busybox</code> that echoes 'hello world' to the interactive terminal and then exits, but this time have the pod deleted automatically</p> <pre><code># Review help, I remember something about \"--rm\" so start there\n$ k run -h | grep \"\\-\\-rm\" -A 2\n    --rm=false:\n        If true, delete the pod after it exits.  Only valid when attaching to the container, e.g. with '--attach' or with '-i/--stdin'.\n\n\n# Run\nk run mybox --image=busybox -it --rm --restart=Never --command=true -- /bin/sh -c 'echo hello world'\nk get po # nowhere to be found :)\n</code></pre>"},{"location":"practice-questions/#q17","title":"Q17","text":"<p>Create an nginx pod and set an env value as 'var1=val1'. Check the env value existence within the pod</p> <pre><code># Review usage\nk run -h\n\n# Generate manifest\nk run mypod --image=nginx --env=\"var1=val1\" --dry-run=client -oyaml &gt; mypod.yaml\n\n# Verify\ncat mypod.yaml \n\n# Apply\nk apply -f mypod.yaml \n\n# Shell into pod and echo env var\n$ k exec -it mypod -- /bin/bash \nroot@mypod:/# echo $var1\nval1\n</code></pre>"},{"location":"practice-questions/#q18","title":"Q18","text":"<p>Create a Pod with two containers, both with image <code>busybox</code> and command <code>echo hello; sleep 3600</code>. Connect to the second container and run 'ls'</p> <pre><code># Review usage\nk run -h\n\n# Generate manifests\nk run my2cpod --image=busybox --dry-run=client --command=true -oyaml -- /bin/sh -c \"echo hello; sleep 3600\" &gt; my2cpod.yaml\n\n# Create second container by copying the first\nvim my2cpod.yaml \n\n$ cat my2cpod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: my2cpod\n  name: my2cpod\nspec:\n  containers:\n  - command:\n    - /bin/sh\n    - -c\n    - echo hello; sleep 3600\n    image: busybox\n    name: c1\n    resources: {}\n  - command:         # copied and renamed\n    - /bin/sh\n    - -c\n    - echo hello; sleep 3600\n    image: busybox\n    name: c2 \n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n\n# Apply\nk apply -f my2cpod.yaml \n\n# Shell into second container\nk exec -it my2cpod -c=c2 -- /bin/sh\n/ # ls\nbin    dev    etc    home   lib    lib64  proc   root   sys    tmp    usr    var\n/ # \n</code></pre>"},{"location":"practice-questions/#q19","title":"Q19","text":"<p>Create a pod with an <code>nginx</code> container exposed on port <code>80</code>. Add a <code>busybox</code> init container which downloads a page using <code>wget -O /work-dir/index.html http://neverssl.com/online</code>. Make a volume of type <code>emptyDir</code> and mount it in both containers. For the <code>nginx</code> container, mount it on <code>/usr/share/nginx/html</code> and for the init container, mount it on <code>/work-dir</code>. When done, get the IP of the created pod and create a <code>busybox</code> pod and run <code>wget -O- &lt;IP&gt;</code></p> <pre><code>k run mywww --image=nginx --port=80 --dry-run=client -oyaml &gt; mywww.yaml\n\n# Search kubernetes.io/docs\n# keywords: emptyDir and volumeMounts:\n# Use help to edit file\nvim mywww.yaml \n$ cat mywww.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: mywww\n  name: mywww\nspec:\n  volumes:\n  - name: myvolume\n    emptyDir:\n  initContainers:\n  - name: myinit\n    image: busybox\n    volumeMounts:\n    - mountPath: /work-dir\n      name: myvolume\n    command: ['sh', '-c', \"wget -O /work-dir/index.html http://neverssl.com/online\"]\n  containers:\n  - image: nginx\n    name: mywww\n    volumeMounts:\n    - mountPath: /usr/share/nginx/html\n      name: myvolume\n    ports:\n    - containerPort: 80\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n\n# Get IP address\nk get pods -owide\n\n$ k get pods -owide\nNAME    READY   STATUS    RESTARTS        AGE     IP            NODE     NOMINATED NODE   READINESS GATES\nmywww   1/1     Running   0               8m1s    192.168.1.5   node01   &lt;none&gt;           &lt;none&gt;\n\n# Create a work pod and sell into it\nk run -it --image=busybox -- sh\n/ # wget -O- 192.168.1.5\nConnecting to 192.168.1.5 (192.168.1.5:80)\nwriting to stdout\n...\n</code></pre>"},{"location":"practice-questions/#q20","title":"Q20","text":"<p>Create 3 pods with names <code>nginx1</code>,<code>nginx2</code>,<code>nginx3</code>. All of them should have the label <code>app=v1</code></p> <pre><code># Review usage\n# Look at options for label\nk run -h\n\n# Create pods\n$ k run nginx1 --image=nginx -l app=v1\npod/nginx1 created\n$ k run nginx2 --image=nginx -l app=v1\npod/nginx2 created\n$ k run nginx3 --image=nginx -l app=v1\npod/nginx3 created\n\n# Verify\n$ k get pods -l app=v1\nNAME     READY   STATUS    RESTARTS   AGE\nnginx1   1/1     Running   0          21s\nnginx2   1/1     Running   0          17s\nnginx3   1/1     Running   0          12s\n\n</code></pre>"},{"location":"practice-questions/#q21","title":"Q21","text":"<p>Display all pods along with their labels</p> <pre><code># Search usage for \"show\" to discover the \"--show-labels\" flag\n$ k get po -h | grep show\n    --show-kind=false:\n    --show-labels=false:\n        When printing, show all labels as the last column (default hide labels column)\n    --show-managed-fields=false:\n\n# Pods with labels\n$ k get po --show-labels\nNAME     READY   STATUS    RESTARTS   AGE     LABELS\nnginx1   1/1     Running   0          4m14s   app=v1\nnginx2   1/1     Running   0          4m10s   app=v1\nnginx3   1/1     Running   0          4m5s    app=v1\n</code></pre>"},{"location":"practice-questions/#q22","title":"Q22","text":"<p>Change the labels of pod 'nginx2' to be app=v2</p> <pre><code># Review usage\nk label -h\n\n# Update label \nk label po/nginx2 app=v2 --overwrite\n\n# Verify\n$ k get po --show-labels\nNAME     READY   STATUS    RESTARTS   AGE     LABELS\nnginx1   1/1     Running   0          7m58s   app=v1\nnginx2   1/1     Running   0          7m54s   app=v2\nnginx3   1/1     Running   0          7m49s   app=v1\n</code></pre>"},{"location":"practice-questions/#q23","title":"Q23","text":"<p>Get the label <code>app</code> for the pods (show a column with APP labels)</p> <pre><code># Search usage for output formats\n# Click link to custom-comlumns\n$ k get pod -h | grep '\\-\\-output' -A 5\n    -o, --output='':\n        Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n\n# Found this example\n# kubectl get pods &lt;pod-name&gt; -o custom-columns=NAME:.metadata.name,RSRC:.metadata.resourceVersion\n\n# Use yq to figure out path\n$ k get po/nginx1 -oyaml | yq e '.metadata.labels.app' -\nv1\n\n# Use example and path to create listing\n$ k get po -o custom-columns=Name:.metadata.name,APP:.metadata.labels.app\nName     APP\nnginx1   v1\nnginx2   v2\nnginx3   v1\n</code></pre>"},{"location":"practice-questions/#q24","title":"Q24","text":"<p>Get only the <code>app=v2</code> pods</p> <pre><code>$ k get po -l app=v2\nNAME     READY   STATUS    RESTARTS   AGE\nnginx2   1/1     Running   0          22m\n</code></pre>"},{"location":"practice-questions/#q25","title":"Q25","text":"<p>Add a new label <code>tier=web</code> to all pods having <code>app=v2</code> or <code>app=v1</code> labels</p> <pre><code># Review usage\nk label -h\n\n# Search help for Label selectors\n# https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors\n#\n# Note:\n# -l app=v1 -l tier=web       - True if app=v1 AND tier=web\n# -l app=v1, tier=web         - True if app=v1 OR  tier=web\n# -l app=v1 -l app=v2         - WARNING this is the same as -l app=v2\n\n# Note I have to use set notation because the key \"app\" is the same\n# https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#set-based-requirement\n$ k label po -l \"app in (v1,v2)\" tier=web\npod/nginx1 labeled\npod/nginx2 labeled\npod/nginx3 labeled\n\n# Of if I forget set notation just run two commands\nk label po -l app=v1\nk label po -l app=v2\n\n# Verify\n$ k get pod --show-labels\nNAME     READY   STATUS    RESTARTS   AGE   LABELS\nnginx1   1/1     Running   0          46m   app=v1,tier=web\nnginx2   1/1     Running   0          46m   app=v2,tier=web\nnginx3   1/1     Running   0          46m   app=v1,tier=web\n</code></pre>"},{"location":"practice-questions/#q26","title":"Q26","text":"<p>Add an annotation <code>owner: marketing</code> to all pods having <code>app=v2</code> label</p> <pre><code># Review usage\nk annotate -h\n\n# Add anno\nkubectl annotate pods -l app=v2 owner=marketing\n\n# Verify\n$ k get po/nginx2 -oyaml | yq e '.metadata.annotations' -\ncni.projectcalico.org/containerID: c32a9569ce94dec306d36ac290795b66299dff315b529d977ab69b43c3d16817\ncni.projectcalico.org/podIP: 192.168.1.4/32\ncni.projectcalico.org/podIPs: 192.168.1.4/32\nowner: marketing\n</code></pre>"},{"location":"practice-questions/#q27","title":"Q27","text":"<p>Remove the <code>app</code> label from the pods we created before</p> <pre><code># Look at the examples\nk label -h | grep \"Examples:\" -A 19\n\n# Select all pods that have an \"app\" label and remove it\n$ k label po -l app app-\npod/nginx1 unlabeled\npod/nginx2 unlabeled\npod/nginx3 unlabeled\n</code></pre>"},{"location":"practice-questions/#q28","title":"Q28","text":"<p>Annotate pods <code>nginx1</code>, <code>nginx2</code>, <code>nginx3</code> with <code>description='my description'</code> value. Assume the pods have no labels on them</p> <pre><code># Review usage\nk annotate -h\n\n# Add anno\nk annotate po/nginx{1..3} description='my description'\npod/nginx1 annotated\npod/nginx2 annotated\npod/nginx3 annotated\n\n# Verify\n$ k get po -oyaml | yq e .items[].metadata.annotations.description -\nmy description\nmy description\nmy description\n</code></pre>"},{"location":"practice-questions/#q29","title":"Q29","text":"<p>Check the annotations for pod nginx1</p> <pre><code># yq\n# For me yq is faster to figure out if it is available\nk get po -oyaml | yq e .items[].metadata.annotations.description -\n\n# jsonpath \n$ k get po -o=jsonpath='{range .items[*]}{.metadata.annotations.description}{\"\\n\"}' \nmy description\nmy description\nmy description\n\n# custom-columns\n# This one looks the best\n$ k get po -o custom-columns=Name:metadata.name,DESC:metadata.annotations.description\nName     DESC\nnginx1   my description\nnginx2   my description\nnginx3   my description\n</code></pre>"},{"location":"practice-questions/#q30","title":"Q30","text":"<p>Remove the <code>description</code> annotations for the <code>nginx</code>, <code>nginx2</code> and <code>nginx3</code> pods</p> <pre><code># Check your pod selection first\n$ k get po/nginx{1..3}\nNAME     READY   STATUS    RESTARTS   AGE\nnginx1   1/1     Running   0          25m\nnginx2   1/1     Running   0          25m\nnginx3   1/1     Running   0          25m\n\n$ k annotate po/nginx{1..3} description-\npod/nginx1 annotated\npod/nginx2 annotated\npod/nginx3 annotated\n\n# Verify\n$ k get po/nginx{1..3} -oyaml | yq e .items[].metadata.annotations.description -\nnull\nnull\nnull\n</code></pre>"},{"location":"practice-questions/#q31","title":"Q31","text":"<p>Remove the <code>nginx</code>, <code>nginx2</code> and <code>nginx3</code> pods to have a clean state in your cluster</p> <pre><code># Delete\n$ k delete po nginx{1..3}\npod \"nginx1\" deleted\npod \"nginx2\" deleted\npod \"nginx3\" deleted\n</code></pre>"},{"location":"practice-questions/#q32","title":"Q32","text":"<p>Create a pod that will be deployed to a Node that has the label <code>accelerator=nvidia-tesla-p100</code></p> <pre><code># List the nodes and label a worker node\n$ k get nodes\nNAME           STATUS   ROLES           AGE   VERSION\ncontrolplane   Ready    control-plane   41d   v1.28.1\nnode01         Ready    &lt;none&gt;          41d   v1.28.1\n\nk label node/node01 accelerator=nvidia-tesla-p100\n\n# Verify node has label\n$ k get node -l accelerator=nvidia-tesla-p100\nNAME     STATUS   ROLES    AGE   VERSION\nnode01   Ready    &lt;none&gt;   41d   v1.28.1\n\n# Search help for node to find nodeName\nk explain pod.spec --recursive | grep -i node\nk explain pod.spec.nodeName\n\n# Generate yaml\nk run myacc --image=nginx --dry-run=client -oyaml &gt; myacc.yamlk run myacc --image=nginx --dry-run=client --oyaml &gt; myacc.yaml\n\n# Add nodeName\nvim myacc.yaml\n\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: myacc\n  name: myacc\nspec:\n  nodeName: node01 # Add this\n  containers:\n  - image: nginx\n    name: myacc\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n\n# Apply\nk apply -f myacc.yaml \n\n# Verify\n$ k get po -owide   \nNAME    READY   STATUS    RESTARTS   AGE   IP            NODE     NOMINATED NODE   READINESS GATES\nmyacc   1/1     Running   0          24s   192.168.1.7   node01   &lt;none&gt;           &lt;none&gt;\n</code></pre>"},{"location":"practice-questions/#q33","title":"Q33","text":"<p>Taint a node with key <code>tier</code> and value <code>frontend</code> with the effect <code>NoSchedule</code>. Then, create a pod that tolerates this taint</p> <pre><code># Review usage\nk taint -h\n\n# Add taint\n$ kubectl taint node node01 tier=frontend:NoSchedule\nnode/node01 tainted\n\nk explain pod.spec --recursive | grep -i toler\nk explain pod.spec.tolerations\n\n# Search help for toleration to get a good example\n# https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/\n\ntolerations:\n- key: \"key1\"\n  operator: \"Equal\"\n  value: \"value1\"\n  effect: \"NoSchedule\"\n\n# Edit manifest to add toleration\nvim myacc.yaml\n\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: myacc\n  name: myacc\nspec:\n  tolerations:         # Add toleration\n  - key: \"tier\"\n    operator: \"Equal\"\n    value: \"frontend\"\n    effect: \"NoSchedule\"\n  nodeName: node01 \n  containers:\n  - image: nginx\n    name: myacc\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n</code></pre>"},{"location":"practice-questions/#q34","title":"Q34","text":"<p>Create a pod that will be placed on node <code>controlplane</code>. Use <code>nodeSelector</code> and <code>tolerations</code></p> <pre><code># Find the controlplane node\n$ k get nodes\nNAME           STATUS   ROLES           AGE   VERSION\ncontrolplane   Ready    control-plane   41d   v1.28.1\nnode01         Ready    &lt;none&gt;          41d   v1.28.1\n\n# Find the taint and labels that identify the controlplane\n$ k get node controlplane -oyaml | yq e\n...\n  taints:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/control-plane\n...\n  labels:\n    kubernetes.io/hostname: controlplane\n...\n\n# Search usage for nodeSelector\n# Note the nodeSelector is a label selector\n#   nodeSelector:\n#     nodeLabelKey: value\nk explain pod --recursive | grep -i nodeSelector\nk explain pod.spec.nodeSelector\n\n\n# Search help for toleration to find this example \n...\n  tolerations:\n  - key: \"key1\"\n    operator: \"Exists\"\n    effect: \"NoSchedule\"\n\n# Edit pod manifest to add nodeSelector\nvim myctlt.yaml\n\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: myctlt\n  name: myctlt\nspec:\n  tolerations:                                   # Add this\n  - key: \"node-role.kubernetes.io/control-plane\"\n    operator: \"Exists\"\n    effect: \"NoSchedule\"\n  nodeSelector:                                  # Add this\n    kubernetes.io/hostname: controlplane\n  containers:\n  - image: nginx\n    name: myctlt\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n\n# Verify\n$ k get po -owide\nNAME     READY   STATUS    RESTARTS   AGE   IP            NODE           NOMINATED NODE   READINESS GATES\nmyctlt   1/1     Running   0          40s   192.168.0.8   controlplane   &lt;none&gt;           &lt;none&gt;\n</code></pre>"},{"location":"practice-questions/#q35","title":"Q35","text":"<p>Create a deployment with image <code>nginx:1.18.0</code>, called <code>nginx</code>, having <code>2 replicas</code>, defining <code>port 80</code> as the port that this container exposes (don't create a service for this deployment)</p> <pre><code># Review usage and examples\nk create deploy -h\n\n# Create manifest\nk create deployment nginx --image=nginx:1.18.0 --dry-run=client --port=80 --replicas=2 -oyaml\n\n# Apply\nk apply -f mydep.yaml \n\n# Verify\n$ k get all\nNAME                         READY   STATUS    RESTARTS   AGE\npod/nginx-584b4f6d78-24mkm   1/1     Running   0          2s\npod/nginx-584b4f6d78-q7629   1/1     Running   0          2s\n\nNAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nservice/kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   41d\n\nNAME                    READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/nginx   2/2     2            2           2s\n\nNAME                               DESIRED   CURRENT   READY   AGE\nreplicaset.apps/nginx-584b4f6d78   2         2         2       2s\n</code></pre>"},{"location":"practice-questions/#q36","title":"Q36","text":"<p>View the YAML of this deployment</p> <pre><code>k get deploy/nginx -oyaml | yq e\n</code></pre>"},{"location":"practice-questions/#q37","title":"Q37","text":"<p>View the YAML of the replica set that was created by this deployment</p> <pre><code>k get rs -l app=nginx  -oyaml | yq e\n</code></pre>"},{"location":"practice-questions/#q38","title":"Q38","text":"<p>Get the YAML for one of the pods</p> <pre><code># List the pods\n$ k get po -l app=nginx  \nNAME                     READY   STATUS    RESTARTS   AGE\nnginx-584b4f6d78-24mkm   1/1     Running   0          8m58s\nnginx-584b4f6d78-q7629   1/1     Running   0          8m58s\n\n# Pick one and display it yaml\nk get po/nginx-584b4f6d78-24mkm -oyaml | yq e\n</code></pre>"},{"location":"practice-questions/#q39","title":"Q39","text":"<p>Check how the deployment rollout is going</p> <pre><code># Review usage\nk rollout -h\nk rollout status -h\n\n# Display rollout status\n$ k rollout status deploy/nginx \ndeployment \"nginx\" successfully rolled out\n</code></pre>"},{"location":"practice-questions/#q40","title":"Q40","text":"<p>Update the nginx image to<code>nginx:1.19.8</code></p> <pre><code># Edit the manifest\nk edit deploy nginx # change the .spec.template.spec.containers[0].image\n\n# alternatively...\n# Review usage\nk set -h\nk set image -h\n\n# Set image\nk set image deployment/nginx nginx=nginx:1.19.0\n</code></pre>"},{"location":"practice-questions/#q41","title":"Q41","text":"<p>Check the rollout history and confirm that the replicas are OK</p> <pre><code>$ k rollout history deploy/nginx \ndeployment.apps/nginx \nREVISION  CHANGE-CAUSE\n1         &lt;none&gt;\n2         &lt;none&gt;\n\n$ k rollout status deploy/nginx \ndeployment \"nginx\" successfully rolled out\n\n$ k rollout history deploy/nginx \ndeployment.apps/nginx \nREVISION  CHANGE-CAUSE\n1         &lt;none&gt;\n2         &lt;none&gt;\n\n$ k rollout status deploy/nginx \ndeployment \"nginx\" successfully rolled out\n</code></pre>"},{"location":"practice-questions/#q42","title":"Q42","text":"<p>Undo the latest rollout and verify that new pods have the old image (<code>nginx:1.18.0</code>)</p> <pre><code># Review usage and examples\nk rollout -h\nk rollout undo deploy/nginx \n\n#Verify\n$ k get deploy/nginx -oyaml | yq e '.spec.template.spec.containers[0].image' -\nnginx:1.18.0\n</code></pre>"},{"location":"practice-questions/#q43","title":"Q43","text":"<p>Do an on purpose update of the deployment with a wrong image <code>nginx:1.91</code></p> <pre><code># Edit manifest\nk edit deployment/nginx\n\n# Or set image\nk set image deployment/nginx nginx=nginx:1.92\n</code></pre>"},{"location":"practice-questions/#q44","title":"Q44","text":"<p>Verify that something's wrong with the rollout</p> <pre><code>$ k rollout status deploy/nginx\nWaiting for deployment \"nginx\" rollout to finish: 1 out of 2 new replicas have been updated...\n\n$ k get rs  -l app=nginx\nNAME               DESIRED   CURRENT   READY   AGE\nnginx-584b4f6d78   2         2         2       27m\nnginx-675b746db7   0         0         0       22m\nnginx-bd8859678    1         1         0       5m45s\n\n$ k get pod -l app=nginx\nNAME                     READY   STATUS             RESTARTS   AGE\nnginx-584b4f6d78-r8wnj   1/1     Running            0          11m\nnginx-584b4f6d78-vs6dq   1/1     Running            0          11m\nnginx-bd8859678-4w7f5    0/1     ImagePullBackOff   0          6m3s\n</code></pre>"},{"location":"practice-questions/#q45","title":"Q45","text":"<p>Return the deployment to the second revision (number 2) and verify the image is <code>nginx:1.19.8</code></p> <pre><code># Review examples\n$ k rollout undo -h | grep Example -A 9 \nExamples:\n  # Roll back to the previous deployment\n  kubectl rollout undo deployment/abc\n\n  # Roll back to daemonset revision 3\n  kubectl rollout undo daemonset/abc --to-revision=3\n\n  # Roll back to the previous deployment with dry-run\n  kubectl rollout undo --dry-run=server deployment/abc\n\n# Rollback\nk rollout undo deployment/nginx --to-revision=2\n\n# Verify\n$ k get deploy/nginx -oyaml | yq e '.spec.template.spec.containers[0].image' -\nnginx:1.19.0\n</code></pre>"},{"location":"practice-questions/#q46","title":"Q46","text":"<p>Check the details of the fourth revision (number 4)</p> <pre><code># Review usage\n$ k rollout history -h\n\n# Show details of rev 4\n$ k rollout history deploy/nginx --revision=4\ndeployment.apps/nginx with revision #4\nPod Template:\n  Labels:       app=nginx\n        pod-template-hash=bd8859678\n  Containers:\n   nginx:\n    Image:      nginx:1.92\n    Port:       80/TCP\n    Host Port:  0/TCP\n    Environment:        &lt;none&gt;\n    Mounts:     &lt;none&gt;\n  Volumes:      &lt;none&gt;\n</code></pre>"},{"location":"practice-questions/#q47","title":"Q47","text":"<p>Scale the deployment to 5 replicas</p> <pre><code># Review usage\nk scale -h\n\n# Scale up\nk scale --replicas=5 deploy/nginx\n</code></pre>"},{"location":"practice-questions/#q48","title":"Q48","text":"<p>Autoscale the deployment, pods between 5 and 10, targetting CPU utilization at 80%</p> <pre><code># Review usage and examples\nk autoscale -h\n\n# Create hpa manifest\nk autoscale deployment/nginx --min=5 --max=10 --cpu-percent=80 --dry-run=client -oyaml &gt; myhpa.yaml\n\n# Verify\nk get pods\n</code></pre>"},{"location":"practice-questions/#q49","title":"Q49","text":"<p>Pause the rollout of the deployment</p> <pre><code># Review usage and examples\nk rollout -h\n\n# Pause\nk rollout pause deployment/nginx\n</code></pre>"},{"location":"practice-questions/#q50","title":"Q50","text":"<p>Update the image to <code>nginx:1.19.9</code> and check that there's nothing going on, since we paused the rollout</p> <pre><code># Review usage\nk set -h\n\n# Change the image\nk set image deployment/nginx nginx=nginx:1.19.9\n\n# See that the rollout is not finished\n$ k rollout status deployment/nginx -w=false\nWaiting for deployment \"nginx\" rollout to finish: 0 out of 5 new replicas have been updated...\n\n# Confirm \"DeploymentPaused\"\n$ k describe deploy/nginx | grep Conditions -A 4\nConditions:\n  Type           Status   Reason\n  ----           ------   ------\n  Progressing    Unknown  DeploymentPaused\n  Available      True     MinimumReplicasAvailable\n</code></pre>"},{"location":"practice-questions/#q51","title":"Q51","text":"<p>Resume the rollout and check that the <code>nginx:1.19.9</code> image has been applied</p> <pre><code># Review usage \nk rollout resume -h\n\n# Resume\nk rollout resume deploy/nginx\n\n# Check status\n$ k rollout status deploy/nginx\ndeployment \"nginx\" successfully rolled out\n\n# Verify\n$ k get po -l app=nginx -oyaml | yq e  '.items[0].spec.containers[0].image' -\nnginx:1.19.9\n</code></pre>"},{"location":"practice-questions/#q52","title":"Q52","text":"<p>Delete the deployment and the horizontal pod autoscaler you created</p> <pre><code># First list befor you delete\n$ k get deployment,hpa\nNAME                    READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/nginx   10/10   10           10          33m\n\nNAME                                        REFERENCE          TARGETS         MINPODS   MAXPODS   REPLICAS   AGE\nhorizontalpodautoscaler.autoscaling/nginx   Deployment/nginx   &lt;unknown&gt;/50%   10        15        10         2m56s\n\n# Delete\n$ k delete deployment/nginx \ndeployment.apps \"nginx\" deleted\n\n$ k delete hpa/nginx        \nhorizontalpodautoscaler.autoscaling \"nginx\" deleted\n</code></pre>"},{"location":"practice-questions/#q53","title":"Q53","text":"<p>Implement canary deployment by running two instances of <code>nginx</code> marked as <code>version=v1</code> and <code>version=v2</code> so that the load is balanced at 75%-25% ratio</p> <pre><code># Read help: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#canary-deployment\n\n# Review usage and examples\nk create deployment -h\n\n# Generate manifests\nk create deployment mycan --image=nginx:1.19.0 -r=3 --port=80 --dry-run=client -oyaml &gt; mycan-deploy2.yaml\nk create deployment mycan --image=nginx:1.18.0 -r=9 --port=80 --dry-run=client -oyaml &gt; mycan-deploy1.yaml\n\n# Edit manifests to make the deployment names unique\n# Could use vim to edit instead\nsed -i 's/name: mycan/name: mycan1/g' mycan-deploy1.yaml\nsed -i 's/name: mycan/name: mycan2/g' mycan-deploy2.yaml\n\n\n# Apply\nk apply -f mycan-deploy1.yaml\nk apply -f mycan-deploy2.yaml\n\n# Check to see that all pods are under the common label\nk get pods -l app=nx\n\n# Review usage and examples\nk create service -h\nk create service clusterip -h\n\n# Generate manifest\nk create service clusterip mycan --tcp=80:80 --dry-run=client -oyaml &gt; mycan-svc.yaml\n\n# Apply\nk apply -f mycan-svc.yaml \n\n# Verify the service SELECTOR is \"app=mycan\"\n$ k get svc/mycan -owide\nNAME    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE   SELECTOR\nmycan   ClusterIP   10.111.77.10   &lt;none&gt;        80/TCP    38s   app=mycan\n\n# Then verify that all pods show up under this selector\n# This means that the service is loadbalancing to pods in a round robin fassion\n# at a ration of 3:1\n#\n$ k get po -l app=mycan\nNAME                      READY   STATUS    RESTARTS   AGE\nmycan1-764f57dfcd-65msn   1/1     Running   0          3m39s\nmycan1-764f57dfcd-6txwl   1/1     Running   0          3m39s\nmycan1-764f57dfcd-7z8dr   1/1     Running   0          3m39s\nmycan1-764f57dfcd-8fbr9   1/1     Running   0          3m39s\nmycan1-764f57dfcd-fv644   1/1     Running   0          3m39s\nmycan1-764f57dfcd-h8hjb   1/1     Running   0          3m39s\nmycan1-764f57dfcd-n6c9g   1/1     Running   0          3m39s\nmycan1-764f57dfcd-pwb69   1/1     Running   0          3m39s\nmycan1-764f57dfcd-wsdks   1/1     Running   0          3m39s\nmycan2-855f78f44c-flnd4   1/1     Running   0          3m39s\nmycan2-855f78f44c-h2sz7   1/1     Running   0          3m39s\nmycan2-855f78f44c-nqxbf   1/1     Running   0          3m39s\n</code></pre>"},{"location":"practice-questions/#q54","title":"Q54","text":"<p>Implement canary deployment by running two instances of <code>nginx</code> marked as <code>version=v1</code> and <code>version=v2</code> so that the load is balanced at 75%-25% ratio, but this time make is so the deployment respond with <code>version-1</code> and <code>version-2</code> respectivly</p> <pre><code># Review usage and examples\nk create deployment -h\n\n# Generate manifests\nk create deployment nxa --image=nginx:1.18.0 -r=9 --port=80 --dry-run=client -oyaml &gt; nxa.yaml\n\n# Find index.html path\n$ k exec -it po/nxa-5dbb8f8f9c-24967 -- sh\n% find . | grep index.html\n./usr/share/nginx/html/index.html\n\n\n# Search kubernetes.io/docs\n#   - find emptDir volume example\n#   - find init container example\n#\n# Edit deployment to add emptyDir volume at /usr/share/nginx/html/index.html\n# add init container to populate index.html\n\nvim nxa.yaml\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  creationTimestamp: null\n  labels:\n    app: nx\n  name: nxa\nspec:\n  replicas: 9\n  selector:\n    matchLabels:\n      app: nx\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: nx\n    spec:\n      initContainers: # add initContainer\n      - name: init\n        volumeMounts:\n         - mountPath: /usr/share/nginx/html\n           name: data\n        image: busybox:1.28\n        command:\n        - /bin/sh\n        - -c\n        - echo version-1 &gt;  /usr/share/nginx/html/index.html\n      volumes:       # add emptyDir vol\n      - name: data\n        emptyDir: {}\n      containers:\n      - image: nginx:1.18.0\n        name: nginx\n        volumeMounts:\n        - mountPath: /usr/share/nginx/html\n          name: data\n        ports:\n        - containerPort: 80\n        resources: {}\nstatus: {}\n\n\ncp nxa.yaml nxb.yaml\n\nvim nxb.yaml\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  creationTimestamp: null\n  labels:\n    app: nx\n  name: nxb  # Change deployment name\nspec:\n  replicas: 3 # Change replicas\n  selector:\n    matchLabels:\n      app: nx\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: nx\n    spec:\n      initContainers:\n      - name: init\n        volumeMounts:\n         - mountPath: /usr/share/nginx/html\n           name: data\n        image: busybox:1.28\n        command: \n        - /bin/sh\n        - -c\n        - echo version-2 &gt;  /usr/share/nginx/html/index.html \n      volumes:\n      - name: data\n        emptyDir: {}\n      containers:\n      - image: nginx:1.19.0 # chane image\n        name: nginx\n        volumeMounts:\n        - mountPath: /usr/share/nginx/html\n          name: data\n        ports:\n        - containerPort: 80\n        resources: {}\nstatus: {}\n\nk apply -f nxa.yaml \nk apply -f nxb.yaml\n\n# Verify that index.html has been update, pick any pod\n$ k exec pods/nxa-78f585dbcd-7vmc7 -it -c nginx -- cat /usr/share/nginx/html/index.html\nversion-1\n\n# Make sure all 12 pods are listed under the common label\nk get po -l app=nx\n\n$ k get po -l app=nx | grep nxa | wc -l\n9\n$ k get po -l app=nx | grep nxb | wc -l\n3\n\n# Review usage and examples\nk create service -h\nk create service clusterip -h\n\n# Generate manifest\nk create service clusterip nx --tcp=80:80 --dry-run=client -oyaml &gt; nxsvc.yaml\n\n# Apply\nk apply -f nxsvc.yaml \n\n# Hit the service\nk run  test -it --rm --image=busybox --command -- /bin/sh -c 'while true;do wget -O - -q  http://nx; sleep 1; done'\n</code></pre>"},{"location":"practice-questions/#q55","title":"Q55","text":"<p>Create a job named <code>pi</code> with image <code>perl:5.34</code> that runs the command with arguments <code>perl -Mbignum=bpi -wle 'print bpi(2000)'</code></p> <pre><code># Review usage and examples\nk create job -h\n\n# Generate manifests\nk create job mypi --image=perl:5.34 --dry-run=client -oyaml -- perl -Mbignum=bpi -wle 'print bpi(2000)'  &gt; mypi.yaml\n\n# Apply\nk apply -f mypi.yaml\n\n# Verify\n$ k logs po/mypi-x4vnc\nn</code></pre>"},{"location":"practice-questions/#q56","title":"Q56","text":"<p>Create a job with the image <code>busybox</code> that executes the command <code>echo hello;sleep 30;echo world</code></p> <pre><code># Review usage and examples\nk create job -h\n\n# Create job\nk create job myjob --image=busybox -- /bin/sh -c \"echo hello;sleep 30;echo world\"\n\n# Verify\n$ k get job\nNAME    COMPLETIONS   DURATION   AGE\nmyjob   1/1           35s        2m12s\n</code></pre>"},{"location":"practice-questions/#q57","title":"Q57","text":"<p>Create a job with the image <code>busybox</code> that executes the command <code>echo hello;sleep 30;echo world</code> and follow the logs untill the job complets</p> <pre><code># Review usage and examples\nk create job -h\n\n# Create job\nk create job myjob --image=busybox -- /bin/sh -c \"echo hello;sleep 30;echo world\"\n\n$ k logs -l job-name=myjob -f\nhello\nworld\n</code></pre>"},{"location":"practice-questions/#q58","title":"Q58","text":"<p>See the status of the job, describe it and see the logs</p> <pre><code>kubectl get jobs\nkubectl describe jobs myjob\nkubectl logs job/myjob\n</code></pre>"},{"location":"practice-questions/#q59","title":"Q59","text":"<p>Create a job with the image <code>busybox</code> that executes the command <code>echo hello;sleep 30;echo world</code> ensure that it will be automatically terminated by K8s if it takes more than <code>10</code> seconds to execute. Find evidence that the job was was terminated my K8s</p> <pre><code># Review usage and examples\nk create job -h\n\n# Search for \"terminate\" in the kubernetes.io/dos\n# see: https://kubernetes.io/docs/concepts/workloads/controllers/job/#job-termination-and-cleanup\n# Use `.spec.activeDeadlineSeconds`\nk explain job.spec.activeDeadlineSeconds\n\n# Create manifest\nk create job \n\nk create job myjob --image=busybox --dry-run=client -oyaml -- /bin/sh -c \"echo hello;sleep 30;echo world\" &gt; myjob.yaml\n\nvim myjob.yaml\n\napiVersion: batch/v1\nkind: Job\nmetadata:\n  creationTimestamp: null\n  name: myjob\nspec:\n  activeDeadlineSeconds: 10 # Add this line\n  template:\n    metadata:\n      creationTimestamp: null\n    spec:\n      containers:\n      - command:\n        - /bin/sh\n        - -c\n        - echo hello;sleep 30;echo world\n        image: busybox\n        name: myjob\n        resources: {}\n      restartPolicy: Never\nstatus: {}\n\n# Apply and watch run\n$ k apply -f myjob.yaml; k get pods -owide -w\njob.batch/myjob created\nNAME          READY   STATUS              RESTARTS   AGE   IP       NODE     NOMINATED NODE   READINESS GATES\nmyjob-k4n4n   0/1     ContainerCreating   0          0s    &lt;none&gt;   node01   &lt;none&gt;           &lt;none&gt;\nmyjob-k4n4n   0/1     ContainerCreating   0          0s    &lt;none&gt;   node01   &lt;none&gt;           &lt;none&gt;\nmyjob-k4n4n   1/1     Running             0          1s    192.168.1.4   node01   &lt;none&gt;           &lt;none&gt;\nmyjob-k4n4n   1/1     Terminating         0          10s   192.168.1.4   node01   &lt;none&gt;           &lt;none&gt;\nmyjob-k4n4n   1/1     Terminating         0          10s   192.168.1.4   node01   &lt;none&gt;           &lt;none&gt;\n\n# Verify\n$ k get job/myjob -oyaml | yq e '.status' -\nconditions:\n  - lastProbeTime: \"2023-10-22T01:47:44Z\"\n    lastTransitionTime: \"2023-10-22T01:47:44Z\"\n    message: Job was active longer than specified deadline\n    reason: DeadlineExceeded\n    status: \"True\"\n    type: Failed\nfailed: 1\nready: 1\nstartTime: \"2023-10-22T01:47:34Z\"\nuncountedTerminatedPods: {}\n</code></pre>"},{"location":"practice-questions/#q60","title":"Q60","text":"<p>Create a job with the image <code>busybox</code> that executes the command <code>echo hello;sleep 30;echo world</code>, make it run <code>5 times</code>, one after the other. Verify its status and delete it</p> <pre><code># Review usage and examples\nk create job -h\n\n# Explain job spec, found \"completions\" and this was all that was needed to know what to do\nk explain job.spec      \n\n# Generate manifest\nk create job myjob --image=busybox --dry-run=client -oyaml -- /bin/sh -c \"echo hello;sleep 30;echo world\" &gt; myjob.yaml\n\n# Edit manifests\nvim myjob.yaml\n\napiVersion: batch/v1\nkind: Job\nmetadata:\n  creationTimestamp: null\n  name: myjob\nspec:\n  completions: 5 # add this\n  parallelism: 1 # add this\n  template:\n    metadata:\n      creationTimestamp: null\n    spec:\n      containers:\n      - command:\n        - /bin/sh\n        - -c\n        - echo hello;sleep 30;echo world\n        image: busybox\n        name: myjob\n        resources: {}\n      restartPolicy: Never\nstatus: {}\n\n# Apply and watch run\nk apply -f myjob.yaml; k get pods -l job-name=myjob -owide -w\n</code></pre>"},{"location":"practice-questions/#q61","title":"Q61","text":"<p>Create the same job, but make it run 5 parallel times</p> <pre><code># Review usage and examples\nk create job -h\n\n# Explain job spec, found \"completions\" and this was all that was needed to know what to do\nk explain job.spec      \n\n# Generate manifest\nk create job myjob --image=busybox --dry-run=client -oyaml -- /bin/sh -c \"echo hello;sleep 30;echo world\" &gt; myjob.yaml\n\n# Edit manifests\nvim myjob.yaml\n\napiVersion: batch/v1\nkind: Job\nmetadata:\n  creationTimestamp: null\n  name: myjob\nspec:\n  completions: 5 # Add this\n  parallelism: 5 # Add this\n  template:\n    metadata:\n      creationTimestamp: null\n    spec:\n      containers:\n      - command:\n        - /bin/sh\n        - -c\n        - echo hello;sleep 30;echo world\n        image: busybox\n        name: myjob\n        resources: {}\n      restartPolicy: Never\nstatus: {}\n\n# Apply and watch run\nk apply -f myjob.yaml\n\nwatch kubectl get pods\n</code></pre>"},{"location":"practice-questions/#q62","title":"Q62","text":"<p>Create a namespace called <code>ggckad-s0</code> in your cluster.</p> <p>Run the following pods in this namespace.</p> <ol> <li>A pod called <code>pod-a</code> with a single container running the <code>kubegoldenguide/simple-http-server</code> image</li> <li>A pod called <code>pod-b</code> that has one container running the <code>kubegoldenguide/alpine-spin:1.0.0</code> image, and one container running <code>nginx:1.7.9</code></li> </ol> <p>Write down the output of <code>kubectl get pods</code> for the <code>ggckad-s0</code> namespace.</p> <pre><code># Create namespace\nk create namespace ggckad-s0\nns ggckad-s0\n\n# Generate pod manifests\nkubectl run pod-a --image=kubegoldenguide/simple-http-server\nkubectl run pod-b --image=kubegoldenguide/alpine-spin:1.0.0 --dry-run=client -o yaml &gt; pod-b.yaml\n\n\n# Modify the pod-b.yaml and add the second container\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: pod-b\n  name: pod-b\nspec:\n  containers:\n  - image: kubegoldenguide/alpine-spin:1.0.0\n    name: pod-b\n  # manually add the nginx image\n  - image: nginx:1.7.9\n    name: nginx\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\nstatus: {}\n\n# Apply \nk apply -f pod-b.yaml\n\n# Answer\nk get pods\n\nNAME    READY   STATUS    RESTARTS   AGE\npod-a   1/1     Running   0          26s\npod-b   2/2     Running   0          36s\n</code></pre>"},{"location":"practice-questions/#q63","title":"Q63","text":"<p>All operations in this question should be performed in the <code>ggckad-s2</code> namespace.</p> <p>Create a ConfigMap called <code>app-config</code> that contains the following two entries:</p> <ul> <li><code>connection_string</code> set to <code>localhost:4096</code></li> <li><code>external_url</code> set to <code>google.com</code></li> </ul> <p>Run a pod called <code>question-two-pod</code> with a single container running the <code>kubegoldenguide/alpine-spin:1.0.0</code> image, and expose these &gt;configuration settings as environment variables inside the container.</p> <pre><code># Create namespace\nk create ns ggckad-s2\nns ggckad-s2\n\n# Create configmap\n# Use help to review command Usage example\nk create cm --help\n\n# Create manifest\nk create cm app-config \\\n  --from-literal=connection_string=localhost:4096 \\\n  --from-literal=external_url=google.com \n\n# Review manifest and apply\nk get cm/app-config -oyaml | yq .\n\n# Create pod\n# Review command Usage example\nk run --help\n\n# Create manifest\nk run question-two-pod \\\n  --image=kubegoldenguide/alpine-spin:1.0.0 \\\n  --dry-run=client -oyaml &gt; question-two-pod.yaml\n\n# Research\n#\n# Figure out how to expose the configmap as environment variables\n# \n# - open `http://kubernetes.io/docs`\n# - search for configmap\n# - click on \"Configure a Pod to Use a ConfigMap\"\n# - look for `valueFrom` example to copy from\n#\n# or \n# Use explain to figure out how to expose the cm as env vars\nk explain pod.spec.containers.env.valueFrom.configMapKeyRef\n\n\n# Edit file add the valueFrom section\nvim question-two-pod.yaml\n\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: question-two-pod\n  name: question-two-pod\nspec:\n  containers:\n  - image: kubegoldenguide/alpine-spin:1.0.0\n    name: question-two-pod\n    env:\n    - name: CONNECTION_STRING\n      valueFrom:\n        configMapKeyRef:\n          name: app-config\n          key: connection_string\n    - name: EXTERNAL_URL \n      valueFrom:\n        configMapKeyRef:\n          name: app-config\n          key: external_url\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\n\n# Apply\nk apply -f question-two-pod.yaml\n\n# Verify\nk exec -it  pod/question-two-pod -- /bin/sh\n\n/ # echo $EXTERNAL_URL\ngoogle.com\n/ # echo $CONNECTION_STRING\nlocalhost:4096\n</code></pre>"},{"location":"practice-questions/#q64","title":"Q64","text":"<p>All operations in this question should be performed in the <code>ggckad-s2</code> namespace. Create a pod that has two containers. Both containers should run the <code>kubegoldenguide/alpine-spin:1.0.0</code> image. The first container should run as <code>user ID 1000</code>, and the second container with <code>user ID 2000</code>. Both containers should use file system <code>group ID 3000</code>.</p> <p>Answer:</p> <pre><code># Create namespace\nk create ns ggckad-s2\nns ggckad-s2\n\n#\n# Create base pod manifest\n#\nk run mypod --image=kubegoldenguide/alpine-spin:1.0.0 --dry-run=client -oyaml &gt; mypod.yaml\n\n\n# Research\n#\n# \"user\" is in the question so I start there\n# Search pod spec for \"user\" because I did not remember \"securityContext\"\n#\nk explain pod.spec --recursive=true | grep -i user\n\n# Search kubernetes.io/docs for \"securityContext\" to find an example\n# Also now that I know what it is called explain it to verify\nk explain pod.spec.containers.securityContext\n\n# Now I know enough to edit the base yaml\nvim mypod.yaml\n\n# Here is what it looks like when I am done\n$ cat mypod.yaml \napiVersion: v1\nkind: Pod\nmetadata:\n creationTimestamp: null\n labels:\n   run: mypod\n name: mypod\nspec:\n containers:\n - image: kubegoldenguide/alpine-spin:1.0.0\n   name: c1\n   securityContext:\n     runAsUser: 1000\n     runAsGroup: 3000\n - image: kubegoldenguide/alpine-spin:1.0.0\n   name: c2\n   securityContext:\n     runAsUser: 2000\n     runAsGroup: 3000\n   resources: {}\n dnsPolicy: ClusterFirst\n restartPolicy: Always\nstatus: {}\n\n# Apply\nk apply -f mypod.yaml\n\n# Verify\n$ k exec -it pod/mypod -c=c1 -- /bin/sh  \n/ $ id\nuid=1000 gid=3000\n\n$ k exec -it pod/mypod -c=c2 -- /bin/sh\n/ $ id\nuid=2000 gid=3000\n</code></pre>"},{"location":"practice-questions/#question","title":"Question","text":"<p>All operations in this question should be performed in the <code>ggckad-s4</code> namespace. This question will require you to create a pod that runs the image <code>kubegoldenguide/question-thirteen</code>. This image is in the main Docker repository at <code>hub.docker.com</code>.</p> <p>This image is a web server that has a health endpoint served at <code>/health</code>. The web server listens on port <code>8000</code>. (It runs Python\u2019s SimpleHTTPServer.) It returns a 200 status code response when the application is healthy. The application typically takes <code>sixty seconds to start</code>.</p> <p>Create a pod called <code>question-13-pod</code> to run this application, making sure to define <code>liveness</code> and <code>readiness</code> probes that use this health endpoint.</p> <p>Answer:</p> <pre><code># Create namespace\nk create ns ggckad-s4\nns ggckad-g4\n\n# Generate pod manifests\nk run --help\nk run pod4 --image=\"kubegoldenguide/question-thirteen\" --port=8000 --dry-run=client -oyaml &gt; pod4.yaml\n\n# Research\n#\n# search kubernetes.io/docs for \"livenessProbe\" \n# select \"Configure Liveness, Readiness and Startup Probes\"\n# look for httpGet example to add the liveness and readiness probes below\n\nvim pod4.yaml\n\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    run: pod4\n  name: pod4\nspec:\n  containers:\n  - image: kubegoldenguide/question-thirteen\n    name: pod4\n    readinessProbe:\n      httpGet:\n        path: /health\n        port: 8000 \n      initialDelaySeconds: 60\n    livenessProbe:\n      # need to add this to both readiness and liveness probes\n      initialDelaySeconds: 60 \n      httpGet:\n        path: /health\n        port: 8000\n    resources: {}\n  dnsPolicy: ClusterFirst\n  restartPolicy: Always\n\n# Apply\npod4.yaml\n\n# Wait 60 seconds (or more)\n# you are looking for 1/1 READY\n$ k get pods\nNAME   READY   STATUS    RESTARTS   AGE\npod4   1/1     Running   0          107s \n</code></pre>"},{"location":"practice-questions/#question_1","title":"Question","text":"<p>All operations in this question should be performed in the <code>ggckad-s5</code> namespace. Create a file called <code>question-5.yaml</code> that declares a deployment in the <code>ggckad-s5</code> namespace, with <code>six replicas</code> running the <code>nginx:1.7.9</code> image.</p> <p>Each pod should have the label <code>app=revproxy</code>. The deployment should have the label <code>client=user</code>. Configure the deployment so that when the deployment is updated, the existing pods are killed off before new pods are created to replace them.</p> <p>Answer:</p> <pre><code># Create namespace\nk create ns ggckad-s5\nns ggckad-s5\n\n#\n# Research\n#\n\n# Do this to find the deployment.spec.strategy is what I need\nk explain deployment.spec --recursive=true | grep strategy -B 22 -A 3\n\n# Do this to see that Recreate is what I want\ncontrolplane $ k explain deployment.spec.strategy.type         \nGROUP:      apps\nKIND:       Deployment\nVERSION:    v1\n\nFIELD: type &lt;string&gt;\n\nDESCRIPTION:\n    Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is\n    RollingUpdate.\n\n    Possible enum values:\n     - `\"Recreate\"` Kill all existing pods before creating new ones.\n     - `\"RollingUpdate\"` Replace the old ReplicaSets by new one using rolling\n    update i.e gradually scale down the old ReplicaSets and scale up the new\n    one.\n\n# Generate manifest\nk create deployment -h\nk create deployment d5 --image=nginx:1.7.9 --dry-run=client -oyaml  &gt; question-5.yaml\n\nvim question-5.yaml\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  creationTimestamp: null\n  labels:\n    client: user\n  name: d5\n  namespace: ggckad-s5\nspec:\n  replicas: 6\n  selector:\n    matchLabels:\n      app: revproxy\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: revproxy\n    spec:\n      containers:\n      - image: nginx:1.7.9\n        name: nginx\n        resources: {}\nstatus: {}\n\n# Apply\nns ggckad-s5\nk apply -f question-5.yaml \n\n# Verify\n# You should see six pod running\nk get all\n</code></pre>"},{"location":"practice-questions/#question_2","title":"Question","text":"<p>This is question x</p> <p>Answer:</p> <p>this the answer</p> <p>DEVTODO - left off here https://github.com/dgkanatsios/CKAD-exercises/blob/d5a1a2bee71658784f4d5e15130dc90daa023826/c.pod_design.md?plain=1#L979</p>"},{"location":"ref/","title":"References","text":"<ul> <li>Candidate Handbook</li> <li>Curriculum Overview</li> <li>Exam Tips</li> <li>Frequently Asked Questions</li> <li>Update on Certification Exam Proctoring Migration - June 30, 2022</li> <li>CKS CKA CKAD changed Terminal to Remote Desktop</li> <li>My Portal</li> </ul>"}]}